#Classic package imports from the Python libraries
import pandas as pd
import numpy as np
import chaospy as cp

#Select the file we'll be working and manipulate to adjust the format a bit
df = pd.read_excel('C:/Users/Samuele/Dropbox/ECGC_Barcelona/1.Projects/02-JRC/Work/iTFA/Parameters_distributions.xlsx')
df2 = df.sort_values(['Shape'], ascending = True)
df3 = df2[df2.columns[0:7]]
df4 = df3.reset_index()
del df4['index']

#I've also included the inflaction and the probability of 2nd CHD attack to complete the assessment
df4.loc[25]=['Inflation rate', '%', 'normal', 0, 7, 3.5, 3.5]
df4.loc[26]=['Probability of 2nd CHD attack', '', 'lognormal', 1, 2, 1.5, 1.5]
df4.loc[27]=['Relative Risk', '', 'normal', 1.11, 1.37, 1.23, (1.37-1.11)/1.96]
df4['Shape'].loc[21:24]='gamma'
df4['Min'].loc[21:24]=0
df4['Max'].loc[21:24]=5

#OK, let's start by building the uniform distribution now
unif = []
df5 = pd.DataFrame()
sample = []
if df4['Shape'].any()=='Uniform':
    for i1 in df4['Variable'].loc[df4['Shape'] == 'Uniform'].index:
        dist=cp.Uniform(df4['Min'].loc[df4['Shape'] == 'Uniform'][i1],df4['Max'].loc[df4['Shape'] == 'Uniform'][i1])
        unif.append(dist)
        unifS=unif[i1].sample(10000, rule="S")
        np.random.shuffle(unifS)
        sample.append(unifS)
        df5 = pd.DataFrame(sample, index=df4['Variable'].loc[df4['Shape'] == 'Uniform'].values)

#The database is then readjusted and the distributions of different shape are also built 
df6=df4.loc[2:]
df7 = df6.sort_values(['Shape'], ascending = False)
df8 = df7.reset_index()
del df8['index']
normal = []
sampleN = []
if df8['Shape'].any()=='normal':
    for i2 in df8['Variable'].loc[df8['Shape'] == 'normal'].index:
        distN=cp.Truncnorm(df8['Min'].loc[df8['Shape'] == 'normal'][i2],df8['Max'].loc[df8['Shape'] == 'normal'][i2],\
        df8['Mean'].loc[df8['Shape'] == 'normal'][i2], df8['Std'].loc[df8['Shape'] == 'normal'][i2])                   
        normal.append(distN)
        normalS=normal[i2].sample(10000, rule="S")
        np.random.shuffle(normalS)
        sampleN.append(normalS)
df9 = pd.DataFrame(sampleN, index=df8['Variable'].loc[df8['Shape'] == 'normal'].values)

df8b=df8.loc[2:].reset_index()
del df8b['index']
df8c = df8b
lognormal = []
sampleL = []
if df8b['Shape'].any()=='lognormal':
    df8c['Max'] = df8b['Max'].loc[df8b['Shape'] == 'lognormal'].fillna(value=5)
    for i2b in df8c['Variable'].loc[df8c['Shape'] == 'lognormal'].index:
        distL=cp.trunk(cp.Lognormal(df8c['Mean'].loc[df8c['Shape'] == 'lognormal'][i2b],df8c['Std'].loc[df8c['Shape'] == 'lognormal'][i2b],0),\
        df8c['Max'].loc[df8c['Shape'] == 'lognormal'][i2b])        
        lognormal.append(distL)
        lognormalS=lognormal[i2b].sample(10000, rule="S")
        np.random.shuffle(lognormalS)
        sampleL.append(lognormalS)
df9b = pd.DataFrame(sampleL, index=df8c['Variable'].loc[df8c['Shape'] == 'lognormal'].values)

df11=df8.loc[4:]
df13 = df11.sort_values(['Shape'], ascending = False)
df13 = df11.reset_index()
del df13['index']
df13a = df13
gamma = []
sampleG = []
if df13['Shape'].any()=='gamma':
    df13a['Max']=df13['Max'].loc[df13['Shape'] == 'gamma'].fillna(1e99)
    df13a['Min']=df13['Min'].loc[df13['Shape'] == 'gamma'].fillna(0)    
    for i3 in df13a['Variable'].loc[df13a['Shape'] == 'gamma'].index:
        distG=cp.trunk(cp.Gamma((df13a['Mean']**2/df13a['Std']**2).loc[df13a['Shape'] == 'gamma'][i3],(df13a['Std']**2/df13a['Mean']).loc[df13a['Shape'] == 'gamma'][i3],\
        df13a['Min'].loc[df13a['Shape'] == 'gamma'][i3]),df13a['Max'].loc[df13a['Shape'] == 'gamma'][i3])
        gamma.append(distG)
        gammaS=gamma[i3].sample(10000, rule="S")
        np.random.shuffle(gammaS)
        sampleG.append(gammaS)
df16 = pd.DataFrame(sampleG, index=df13a['Variable'].loc[df13a['Shape'] == 'gamma'].values)

# The dataframes built for the different distribution shapes are eventually concatenated
dfF = pd.concat([df5, df9, df9b, df16])

# And trasposed, 'cause we want a column-parameter correlation
dfFi = dfF.T

# The result is eventually exported as Excel file
dfFi.to_excel('C:/Users/Samuele/Dropbox/ECGC_Barcelona/1.Projects/02-JRC/Work/iTFA/gamma_intake_10000.xlsx')
